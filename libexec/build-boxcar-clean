#!/bin/bash

#/ NAME
#/     seed-rvm.sh - copies rvm ruby binaries and runs install-rvm.sh
#/
#/ SYNOPSIS
#/     seed-rvm.sh ssh_config rubies...

function remote_install {
  set -exfu

  cd

  export DEBIAN_FRONTEND="noninteractive"

  # update everything
  aptitude update
  aptitude -y dist-upgrade
  aptitude -y safe-upgrade

  # don't upgrade kernel hereafter
  aptitude hold linux-{,{headers,image}-}{generic,server,virtual}

  # basic packages
  aptitude -y install wget curl netcat git rsync make

  # language
  aptitude -y install language-pack-en

  # unecessary daemons
  aptitude -y purge whoopsie acpid nfs-common rpcbind

  # unecessary editor
  aptitude -y purge nano

  # ruby
  aptitude -y install ruby rdoc ri irb rubygems ruby-dev 
  gem install bundler --no-ri --no-rdoc -v '~> 1.2.5'

  # awsme
  aptitude install -y libxslt1-dev

  # aws
  aptitude install -y openjdk-7-jre-headless > /dev/null

  # virtualbox
  aptitude -y install dkms

  # don't start getty
  for a in $(set +f; cd /etc/init && ls -d tty*.conf); do
    echo "manual" >> "/etc/init/$a"
  done

  # ssl updates
  update-ca-certificates --fresh > /dev/null

  # github.com, bitbucket.org
  ssh-keyscan github.com >> /etc/ssh/ssh_known_hosts
  ssh-keyscan bitbucket.org >> /etc/ssh/ssh_known_hosts

  # enable ubuntu user for vagrant boxes
  if id -a vagrant; then
    sudo mkdir -p ~ubuntu/.ssh
    sudo chmod 700  ~ubuntu/.ssh
    sudo cp ~/.ssh/authorized_keys ~ubuntu/.ssh/
    sudo chmod 600  ~ubuntu/.ssh/authorized_keys
    sudo chown -R ubuntu:ubuntu  ~ubuntu
  fi

  # package cleanup
  aptitude clean

  # remove cached network configurations
  rm -rfv /etc/udev/rules.d/70-persistent-net.rules
  mkdir -pv /etc/udev/rules.d/70-persistent-net.rules
  rm -fv /lib/udev/rules.d/75-persistent-net-generator.rules
  rm -rfv /dev/.udev/ /var/lib/dhcp3/*

  rm -rf ~/build-boxcar-clean ~/build-boxcar-clean.root
}

if [[ "$#" = 0 ]]; then
  if [[ "$UID" = 0 ]]; then
    remote_install
    exit $?
  else
    rsync -ia "$0" "$0.root"
    sudo "$0.root"
    exit $?
  fi
fi

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require boxcar

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"

  # context-git-cache script
  rsync -ia -e "ssh -F $pth_ssh_config" $shome/libexec/context-git-cache default:.context-git-cache

  standard_hook "$bootstrap" "$@"
}

require sub "$BASH_SOURCE" "$@"
