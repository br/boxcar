#!/bin/bash

if [[ "$#" > 0 ]]; then
  BOXCAR="$1"; shift
else
  : ${BOXCAR:="$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)"}
fi

export BOXCAR

PATH="$PATH:$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)/libexec"

# parse the command-line

DEFINE_string "boxname" "" "Vagrant box name"
DEFINE_string 'release' "" 'Ubuntu release'
DEFINE_string 'provider' "virtualbox" 'Vagrant provider'
DEFINE_string "output" "" "Where to bundle the vagrant box"
DEFINE_string "release_dir" "$BOXCAR/vagrant-$(date +%Y%m%d-%H%M-$$)" "Vagrant instance workarea"
DEFINE_string "ssh_username" "ubuntu" "Vagrant ssh username"

DEFINE_string builddir "$BOXCAR/build" "Build directory"
DEFINE_string cachedir "$BOXCAR/build" "Cache directory"

function until_port_open {
  local address="$1"; shift
  local port="$1"; shift

  logger_info "until $address:$port"

  while true; do
    if nc -z "$address" "$port"; then
      echo
      break
    fi
    echo -n "."
    sleep 5
  done
}

function demo_in_vagrant {
  local pth_custom="${@:$(($#))}"

  local tmp_ssh_config="$(mktemp -t XXXXXXXXX)"
  (cd $FLAGS_release_dir && BUNDLE_GEMFILE="$shome/Gemfile" bundle exec vagrant ssh-config | sed -n '/^Host/,$p' > "$tmp_ssh_config")
  $pth_custom "$tmp_ssh_config" "${@:1:$(($#-1))}"
  rm -f "$tmp_ssh_config"
}

function build_vagrant {
  mkdir -p $FLAGS_release_dir

  local nm_keypair="$(build_keypair)"
  demo_vagrant "$nm_keypair" "$FLAGS_boxname" "$@"
  early_termination
  bundle_vagrant
  delete_keypair "$nm_keypair"
}

function configure_remote_git_cache {
  local pth_ssh_config="$1"; shift
  local tmp_git_env="$(mktemp -t XXXXXXXXX)"
  printf "export GIT_USER=%s\n" "$LOGNAME" >> "$tmp_git_env"
  printf "export GIT_PORT=%s\n" "55555" >> "$tmp_git_env"
  printf "export GIT_REPO=%s\n" "$BOXCAR/git-cache" >> "$tmp_git_env"
  rsync -e "ssh -F $pth_ssh_config" $tmp_git_env default:.git-env
  rsync -e "ssh -F $pth_ssh_config" $shome/libexec/with-git-cache $shome/libexec/with-http-cache default:
  rm -f $tmp_git_env
}
function adjust_build_phase {
  local nm_hook="$1"; shift
  local next_phase="${nm_hook##*:}"
  if [[ "$next_phase" = "$nm_hook" ]]; then
    BUILD_IMAGE_PHASE="install"
  else
    BUILD_IMAGE_PHASE="$next_phase"
  fi
  export BUILD_IMAGE_PHASE
}

function start_image_hook {
  local pth_hook="$shome/libexec/build-boxcar-run"

  if [[ "$#" = 0 ]]; then
    logger_fatal "missing build boxcar script arg"
    exit 1
  fi

  mark_output
  mark_log "boxcar"
  exec $shome/bin/build train "$FLAGS_provider" "$@" "$pth_hook"
}

function continue_image_hook {
  local pth_ssh_config="$1"; shift

  if [[ "$#" != 0 ]]; then
    adjust_build_phase "$1"
    local raw_hook="$1"; shift
    local nm_hook="${raw_hook%%:*}"
    local pth_hook="$shome/libexec/build-boxcar-${nm_hook}"

    mark_output
    mark_log "$nm_hook"
    exec $pth_hook "$pth_ssh_config" "$@"
  fi
}

function custom_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift
  local nm_bootstrap="$(basename "$pth_bootstrap")"

  rsync -ia -e "ssh -F '$pth_ssh_config'" "$pth_bootstrap" default:
  echo 'Acquire::http { Proxy "http://127.0.0.1:55556"; };' | ssh -F "$pth_ssh_config" default sudo tee /etc/apt/apt.conf.d/01proxy 
  ssh -F "$pth_ssh_config" -R 55555:127.0.0.1:22 -R 55556:127.0.0.1:3128 -A default "env BUILD_IMAGE_PHASE=$BUILD_IMAGE_PHASE ./with-http-cache ./with-git-cache ./$nm_bootstrap"
  ssh -F "$pth_ssh_config" default sudo rm -vf "./$nm_bootstrap" /etc/apt/apt.conf.d/01proxy
}

function standard_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift

  custom_hook "$pth_bootstrap" "$pth_ssh_config" "$@"
  continue_image_hook "$pth_ssh_config" "$@"
}
