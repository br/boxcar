#!/bin/bash

#/ NAME
#/     seed-rvm.sh - copies rvm ruby binaries and runs build-docker.sh
#/
#/ SYNOPSIS
#/     seed-rvm.sh ssh_config rubies...

function remote_build {
  local nm_distro="$1"; shift

  set -exfu

  docker_install
  container_build $nm_distro
}

function container_build {
  local nm_distro="$1"; shift

  local apt_install="sudo env DEBIAN_FRONTEND=noninteractive aptitude -y install"

  $apt_install debootstrap
  sudo umount image/run/shm || true
  sudo rm -rf image
  sudo mkdir image
  sudo -E debootstrap --arch amd64 \
                  --include=language-pack-en,aptitude,wget,curl,git,rsync,make,openssh-server \
                  ${nm_distro} image http://archive.ubuntu.com/ubuntu/

  printf "%s\n%s\n" "#!/bin/bash" "exit 101" | sudo tee image/usr/sbin/policy-rc.d
  sudo chmod 0755 image/usr/sbin/policy-rc.d

  echo 'Acquire::http { Proxy "http://127.0.0.1:3128"; };' | sudo tee image/etc/apt/apt.conf.d/01proxy

  echo 'APT::Install-Recommends "0";' | sudo tee image/etc/apt/apt.conf.d/00DisableInstallRecommends

  sudo -E chroot image apt-get install -y minimal^ server^ standard^

  cat /etc/apt/sources.list \
    | env DISTRO="${nm_distro}" perl -ne 'if (m{^deb}) { s{(\S+\s+\S+)\s+(\S+)}{$beg=$1; $distro=$2; $distro =~ s{\w+}{$ENV{'DISTRO'}}; "$beg $distro"}e; print; }' | sudo tee image/etc/apt/sources.list > /dev/null

  sudo -E chroot image aptitude update
  sudo -E chroot image aptitude dist-upgrade -y
  sudo -E chroot image aptitude safe-upgrade -y

  # create ubuntu user
  sudo chroot image useradd -u 1000 -U -m ubuntu -s /bin/bash
  printf "%s\n" "ubuntu ALL=(ALL) NOPASSWD:ALL" | sudo tee image/etc/sudoers.d/90-cloud-init-users > /dev/null
  sudo chmod 0400 image/etc/sudoers.d/90-cloud-init-users

  # allow vagrant ssh using insecure key
  sudo mkdir -p image/home/ubuntu/.ssh
  sudo chmod 700 image/home/ubuntu/.ssh
  curl https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub | sudo tee image/home/ubuntu/.ssh/authorized_keys
  sudo chmod 600 image/home/ubuntu/.ssh/authorized_keys
  sudo chroot image chown -R ubuntu:ubuntu /home/ubuntu

  # cleanup
  sudo rm -f image/etc/apt/apt.conf.d/01proxy
  sudo umount image/run/shm || true

  # docker image
  sudo tar cfpj - -C image . | docker import - $nm_distro
  sudo rm -rf image
}

function docker_install {
  local apt_install="sudo env DEBIAN_FRONTEND=noninteractive aptitude -y install"

  sudo add-apt-repository -y ppa:dotcloud/lxc-docker
  sudo aptitude update
  $apt_install lxc-docker lxc-templates cgroup-lite libpam-cap libcap2-bin debootstrap
}

remote_build precise > /dev/null
