#!/bin/bash

#/ NAME
#/     seed-rvm.sh - copies rvm ruby binaries and runs install-rvm.sh
#/
#/ SYNOPSIS
#/     seed-rvm.sh ssh_config rubies...

function remote_install {
  set -exfu

  cd

  export DEBIAN_FRONTEND="noninteractive"

  # update everything
  aptitude update
  aptitude -y dist-upgrade
  aptitude -y safe-upgrade

  source /etc/lsb-release
  if [[ "$DISTRIB_CODENAME" = "precise" ]]; then
    aptitude install -y linux-{generic,tools}-lts-raring
    aptitude hold linux-{generic,tools}-lts-raring
  fi

  # don't upgrade kernel hereafter
  aptitude hold linux-{,{headers,image}-}{generic,server,virtual}

  # basic packages
  aptitude -y install wget curl netcat git rsync make

  # language
  aptitude -y install language-pack-en

  # unecessary daemons
  aptitude -y purge whoopsie acpid nfs-common rpcbind

  # unecessary editor
  aptitude -y purge nano

  # ruby
  aptitude -y install ruby rdoc ri irb rubygems ruby-dev 
  gem install bundler --no-ri --no-rdoc -v '~> 1.2.5'

  # awsme
  aptitude install -y libxslt1-dev

  # aws
  aptitude install -y openjdk-7-jre-headless > /dev/null

  # virtualbox
  aptitude -y install dkms

  # don't start getty
  for a in $(set +f; cd /etc/init && ls -d tty*.conf); do
    echo "manual" >> "/etc/init/$a"
  done

  # ssl updates
  update-ca-certificates --fresh > /dev/null

  # github.com, bitbucket.org
  cat >> /etc/ssh/ssh_known_hosts <<EOF
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
EOF

  # enable ubuntu user for vagrant boxes
  if id -a vagrant; then
    mkdir -p ~ubuntu/.ssh
    chmod 700  ~ubuntu/.ssh
    cp ~/.ssh/authorized_keys ~ubuntu/.ssh/
    chmod 600  ~ubuntu/.ssh/authorized_keys
    chown -R ubuntu:ubuntu  ~ubuntu
  fi

  # package cleanup
  aptitude clean

  # remove cached network configurations
  rm -rfv /etc/udev/rules.d/70-persistent-net.rules
  mkdir -pv /etc/udev/rules.d/70-persistent-net.rules
  rm -fv /lib/udev/rules.d/75-persistent-net-generator.rules
  rm -rfv /dev/.udev/ /var/lib/dhcp3/*
}

if [[ "$#" = 0 ]]; then
  if [[ "$UID" = 0 ]]; then
    remote_install
    exit $?
  else
    rsync -ia "$0" "$0.root"
    sudo -E "$0.root"
    exit $?
  fi
fi

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require boxcar

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"

  standard_hook "$bootstrap" "$@"
}

require sub "$BASH_SOURCE" "$@"
