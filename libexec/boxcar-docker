#!/bin/bash

#/ NAME
#/     seed-rvm.sh - copies rvm ruby binaries and runs build-docker.sh
#/
#/ SYNOPSIS
#/     seed-rvm.sh ssh_config rubies...

function remote_build {
  set -exfu; cd

  docker_install
  container_build "$BUILD_IMAGE_PHASE"
}

function remote_install {
  set -exfu; cd

  docker_install
  container_install
}

function container_install {
  local tar_container
  for tar_container in $(set +f; ls -d docker-*.tar.bz2); do
    local nm_container="$(basename $tar_container .tar.bz2)"
    nm_container="${nm_container##docker-}"
    cat $tar_container | sudo docker import - $nm_container
  done

  (set +f; rm -f docker-*.tar.bz2)
}

function container_build {
  local nm_distro="$1"; shift

  local apt_install="sudo env DEBIAN_FRONTEND=noninteractive aptitude -y install"

  $apt_install debootstrap
  rm -rf image
  mkdir image
  sudo -E debootstrap --arch amd64 \
                  --include=language-pack-en,aptitude,wget,curl,git,rsync,make,openssh-server \
                  ${nm_distro} image http://archive.ubuntu.com/ubuntu/

  printf "%s\n%s\n" "#!/bin/bash" "exit 101" | sudo tee image/usr/sbin/policy-rc.d
  sudo chmod 0755 image/usr/sbin/policy-rc.d

  sudo rsync -ia /etc/apt/apt.conf.d/01proxy image/etc/apt/apt.conf.d/01proxy

  echo 'APT::Install-Recommends "0";' | sudo tee image/etc/apt/apt.conf.d/00DisableInstallRecommends

  sudo -E chroot image apt-get install -y minimal^ server^ standard^

  cat /etc/apt/sources.list \
    | env DISTRO="${nm_distro}" perl -ne 'if (m{^deb}) { s{(\S+\s+\S+)\s+(\S+)}{$beg=$1; $distro=$2; $distro =~ s{\w+}{$ENV{'DISTRO'}}; "$beg $distro"}e; print; }' | sudo tee image/etc/apt/sources.list > /dev/null

  sudo -E chroot image aptitude update
  sudo -E chroot image aptitude dist-upgrade -y
  sudo -E chroot image aptitude safe-upgrade -y

  # create ubuntu user
  sudo chroot image useradd -u 1000 -U -m ubuntu -s /bin/bash
  printf "%s\n" "ubuntu ALL=(ALL) NOPASSWD:ALL" | sudo tee image/etc/sudoers.d/90-cloud-init-users > /dev/null
  sudo chmod 0400 image/etc/sudoers.d/90-cloud-init-users

  # allow vagrant ssh using insecure key
  sudo mkdir -p image/home/ubuntu/.ssh
  sudo chmod 700 image/home/ubuntu/.ssh
  cat ~/vagrant.pub | sudo tee image/home/ubuntu/.ssh/authorized_keys
  sudo chmod 600 image/home/ubuntu/.ssh/authorized_keys
  sudo chroot image chown -R ubuntu:ubuntu /home/ubuntu

  # cleanup
  sudo rm -f image/etc/apt/apt.conf.d/01proxy

  # docker image
  sudo tar cfpj docker-${nm_distro}.tar.bz2 -C image .
}

function docker_install {
  local apt_install="sudo env DEBIAN_FRONTEND=noninteractive aptitude -y install"

  curl https://get.docker.io/gpg | sudo apt-key add -
  echo "deb http://get.docker.io/ubuntu docker main" | sudo tee /etc/apt/sources.list.d/docker.list
  sudo aptitude update

  $apt_install lxc-docker lxc-templates cgroup-lite libpam-cap libcap2-bin debootstrap
}

if [[ "$#" = 0 ]]; then
  case "${BUILD_IMAGE_PHASE:-}" in
    install)
      remote_install
      exit $?
      ;;
    *)
      remote_build
      exit $?
      ;;
  esac
fi


# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require boxcar
require boxcar_opt

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"

  case "${BUILD_IMAGE_PHASE:-}" in
    install)
      (set +f; rsync -ia -e "ssh -F '$pth_ssh_config'" $FLAGS_cachedir/docker-*.tar.bz2 default:)
      standard_hook "$bootstrap" "$@"
      ;;
    *)
      rsync -ia -e "ssh -F '$pth_ssh_config'" $shome/config/vagrant.pub default:
      custom_hook "$bootstrap" "$@"
      rsync -ia -e "ssh -F '$pth_ssh_config'" default:docker-${BUILD_IMAGE_PHASE}.tar.bz2 $FLAGS_cachedir/
      continue_image_hook "$@"
      ;;
  esac
}

require sub "$BASH_SOURCE" "$@"
